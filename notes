public void processFile(byte[] fileBytes) throws Exception {
    try (ByteArrayInputStream bais = new ByteArrayInputStream(fileBytes)) {
        GenbankReader<DNASequence, ?> reader = new GenbankReader<>(
            new InputStreamReader(bais),
            new org.biojava.nbio.core.sequence.io.DNASequenceCreator(
                AmbiguityDNACompoundSet.getDNACompoundSet()
            )
        );

        Map<String, DNASequence> map = reader.read();

        Iterator<DNASequence> sequences = map.values().iterator();
        while (sequences.hasNext()) {
            DNASequence seq = sequences.next();
            process(seq);
        }
    }
}




public void processFile(byte[] fileBytes) throws Exception {
    try (ByteArrayInputStream bais = new ByteArrayInputStream(fileBytes)) {
        GenbankReader<DNASequence, NucleotideCompound> reader =
            new GenbankReader<>(
                new InputStreamReader(bais),
                new org.biojava.nbio.core.sequence.io.DNASequenceCreator(
                    AmbiguityDNACompoundSet.getDNACompoundSet()
                )
            );

        Map<String, DNASequence> map = reader.read();

        Iterator<DNASequence> sequences = map.values().iterator();
        while (sequences.hasNext()) {
            DNASequence seq = sequences.next();
            process(seq);
        }
    }
}



import org.biojava.nbio.core.sequence.DNASequence;
import org.biojava.nbio.core.sequence.compound.NucleotideCompound;
import org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;
import org.biojava.nbio.core.sequence.io.GenbankReader;
import org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;
import org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;
import org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;
import org.biojava.nbio.core.sequence.io.DNASequenceCreator;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Map;

public void processFile(byte[] fileBytes) throws Exception {
    try (ByteArrayInputStream bais = new ByteArrayInputStream(fileBytes)) {
        SequenceHeaderParserInterface<DNASequence, NucleotideCompound> headerParser =
            new GenericGenbankHeaderParser<>();

        SequenceCreatorInterface<DNASequence> sequenceCreator =
            new DNASequenceCreator(AmbiguityDNACompoundSet.getDNACompoundSet());

        GenbankReader<DNASequence, NucleotideCompound> reader =
            new GenbankReader<>(
                (InputStream) bais,
                headerParser,
                sequenceCreator
            );

        Map<String, DNASequence> sequences = reader.process();

        for (DNASequence seq : sequences.values()) {
            process(seq); // Your downstream logic
        }
    }
}


import org.biojava.nbio.core.sequence.DNASequence;
import org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;
import org.biojava.nbio.core.sequence.compound.NucleotideCompound;
import org.biojava.nbio.core.sequence.io.DNASequenceCreator;
import org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;
import org.biojava.nbio.core.sequence.io.GenbankReader;
import org.biojava.nbio.core.sequence.io.template.SequenceCreatorInterface;
import org.biojava.nbio.core.sequence.io.template.SequenceHeaderParserInterface;

import java.io.ByteArrayInputStream;
import java.util.Map;

public void processFile(byte[] fileBytes) throws Exception {
    try (ByteArrayInputStream bais = new ByteArrayInputStream(fileBytes)) {

        SequenceHeaderParserInterface<DNASequence, NucleotideCompound> headerParser =
            new GenericGenbankHeaderParser<DNASequence, NucleotideCompound>();

        SequenceCreatorInterface<NucleotideCompound> sequenceCreator =
            new DNASequenceCreator(AmbiguityDNACompoundSet.getDNACompoundSet());

        GenbankReader<DNASequence, NucleotideCompound> reader =
            new GenbankReader<DNASequence, NucleotideCompound>(
                bais,
                headerParser,
                sequenceCreator
            );

        Map<String, DNASequence> map = reader.process(); // or reader.read() in some versions

        for (DNASequence seq : map.values()) {
            process(seq);
        }
    }
}



import org.biojava.nbio.core.sequence.DNASequence;
import org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;
import org.biojava.nbio.core.sequence.compound.NucleotideCompound;
import org.biojava.nbio.core.sequence.io.DNASequenceCreator;
import org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;
import org.biojava.nbio.core.sequence.io.GenbankReader;

import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;

public class GenbankProcessor {

    private final ExecutorService executor;

    public GenbankProcessor(int threads) {
        this.executor = Executors.newFixedThreadPool(threads);
    }

    public void shutdown() {
        executor.shutdown();
    }

    public Future<Void> submitFile(byte[] fileBytes) {
        return executor.submit(() -> {
            processFile(fileBytes);
            return null;
        });
    }

    private void processFile(byte[] fileBytes) throws Exception {
        try (ByteArrayInputStream bais = new ByteArrayInputStream(fileBytes);
             InputStreamReader isr = new InputStreamReader(bais)) {

            GenbankReader<DNASequence, NucleotideCompound> reader =
                new GenbankReader<>(
                    isr,
                    new GenericGenbankHeaderParser<>(),
                    new DNASequenceCreator(AmbiguityDNACompoundSet.getDNACompoundSet())
                );

            Map<String, DNASequence> sequences = reader.process();

            for (DNASequence seq : sequences.values()) {
                process(seq);  // your downstream logic
            }
        }
    }

    private void process(DNASequence seq) {
        // TODO: replace with your real logic
        System.out.println("Processed sequence: " + seq.getAccession().getID());
    }

    // Example usage
    public static void main(String[] args) throws Exception {
        GenbankProcessor processor = new GenbankProcessor(8); // 8 threads

        // Example: submit multiple files
        List<byte[]> files = List.of(
            /* load file1 bytes */,
            /* load file2 bytes */,
            /* etc. */
        );

        for (byte[] fileBytes : files) {
            processor.submitFile(fileBytes);
        }

        processor.shutdown();
    }
}

